# : << EOF
# ~/.tmux.conf

# ------------------------------------------------------------------------------
# General
# ------------------------------------------------------------------------------

# Set the time in milliseconds for which tmux waits after an escape is input to
# determine if it is part of a function or meta key sequences.
set-option -s escape-time 0

# Set the time in milliseconds for which tmux allows multiple commands to be
# entered without pressing the prefix-key again.
set-option -g -s repeat-time 800

# Set the maximum number of lines held in window history.
set-option -g history-limit 10000

# Set the starting index for window and pane numbers.
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Renumber the other windows in numerical order automatically when a window is
# closed in a session.
set-option -g renumber-windows on

# Rename the window automatically to reflect current program.
set-window-option -g automatic-rename on

# Sending a bell when activity occurs.
set-window-option -g monitor-activity on
set-option -g visual-activity off

# Enable focus events for terminals that support them.
set-option -s focus-events on

# Enable mouse support.
set-option -g mouse on

# Enable UTF-8 sequences. (tmux < 2.2)
set-option -g -q status-utf8 on
set-window-option -g -q utf8 on

# ------------------------------------------------------------------------------
# Display
# ------------------------------------------------------------------------------

# Enable 256-color terminal.
set-option -s default-terminal 'screen-256color'

# Set the client terminal title.
set-option -g set-titles on
set-option -g set-titles-string 'tmux: #{session_name} #{window_index} #{pane_index}: #{window_name}'

# Set the time in milliseconds for which status line messages and other
# on-screen indicators are displayed.
set-option -g display-time 2000
set-option -g display-panes-time 1000

# Set the interval time in seconds for which status line updates.
set-option -g status-interval 10

# ------------------------------------------------------------------------------
# Key Bindings
# ------------------------------------------------------------------------------

# Use xterm-style function key sequences.
set-window-option -g xterm-keys on

# Use emacs-style key bindings in the status line.
set-option -g status-keys emacs

# Set the secondary prefix key to Ctrl-a.
set-option -g prefix2 C-a
bind-key -T prefix C-a send-prefix -2

# Global:
#   <prefix> ?        List all key bindings.
#   <prefix> :        Enter the tmux command prompt.
#   <prefix> t        Show the time.
#   <prefix> r        Reload tmux configuration file.
#   Ctrl-l            Clear both screen and history.
bind-key -T prefix r source-file ~/.tmux.conf \; display-message '~/.tmux.conf reloaded'
bind-key -T root C-l send-keys C-l \; run-shell 'sleep 0.1' \; clear-history

# Session:
#   <prefix> Ctrl-c   Create a new session.
#   <prefix> Ctrl-f   Prompt to switch the current session.
#   <prefix> s        Select a new session for the attached client interactively.
#   <prefix> $        Rename the current session.
#   <prefix> d        Detach the current client.
#   <prefix> (        Switch the attached client to the previous session.
#   <prefix> )        Switch the attached client to the next session.
bind-key -T prefix C-c new-session
bind-key -T prefix C-f command-prompt -p find-session 'switch-client -t %%'

# Window:
#   <prefix> c        Create a new window.
#   <prefix> f        Prompt to search for text in open windows.
#   <prefix> w        Choose the current window interactively.
#   <prefix> ,        Rename the current window.
#   <prefix> &        Kill the current window.
#   <prefix> Ctrl-h   Change to the previous window.
#   <prefix> Ctrl-l   Change to the next window.
#   <prefix> Tab      Move to the previously selected window.
bind-key -T prefix & kill-window
bind-key -T prefix -r C-h previous-window
bind-key -T prefix -r C-l next-window
bind-key -T prefix Tab last-window

# Pane:
#   <prefix> -        Split the current pane into two, top and bottom.
#   <prefix> _        Split the current pane into two, left and right.
#   <prefix> x        Kill the current pane.
#   <prefix> q        Briefly display pane indexes.
#   <prefix> o        Select the next pane in the current window.
#   <prefix> h,j,k,l  Change to the pane above, below, to the left, or to the right of the current pane.
#   <prefix> H,J,K,L  Resize the current pane in steps of two cells.
#   <prefix> ;        Move to the previously active pane.
#   <prefix> <        Swap the current pane with the previous pane.
#   <prefix> >        Swap the current pane with the next pane.
#   <prefix> !        Break the current pane out of the window.
#   <prefix> z        Toggle zoom state of the current pane.
#   <prefix> Space    Arrange the current window in the next preset layout.
bind-key -T prefix - split-window -v
bind-key -T prefix _ split-window -h
bind-key -T prefix x kill-pane
bind-key -T prefix < swap-pane -U
bind-key -T prefix > swap-pane -D
bind-key -T prefix -r h select-pane -L
bind-key -T prefix -r j select-pane -D
bind-key -T prefix -r k select-pane -U
bind-key -T prefix -r l select-pane -R
bind-key -T prefix -r H resize-pane -L 2
bind-key -T prefix -r J resize-pane -D 2
bind-key -T prefix -r K resize-pane -U 2
bind-key -T prefix -r L resize-pane -R 2

# Copy Mode:
#   <prefix> [        Enter copy mode to copy text or view the history.
#   <prefix> ]        Paste the most recently copied buffer of text.
#   <prefix> PageUp   Enter copy mode and scroll one page up.
#   <copy-mode-vi> q        Quit copy mode.
#   <copy-mode-vi> g        Go to top line.
#   <copy-mode-vi> G        Go to bottom line.
#   <copy-mode-vi> w        Move cursor forward one word at a time.
#   <copy-mode-vi> b        Move cursor backward one word at a time.
#   <copy-mode-vi> /        Search forward.
#   <copy-mode-vi> ?        Search backward.
#   <copy-mode-vi> n        Next keyword occurrence.
#   <copy-mode-vi> N        Previous keyword occurrence.
#   <copy-mode-vi> Space    Start selection.
#   <copy-mode-vi> Escape   Clear selection.
#   <copy-mode-vi> Enter    Copy selection.

# ------------------------------------------------------------------------------
# Local Configuration
# ------------------------------------------------------------------------------

source-file -q ~/.tmux.conf.local

# -- 8< ------------------------------------------------------------------------

run-shell 'cut -c3- ~/.tmux.conf | sh -s main'

# EOF
#
# set -o errexit
# set -o nounset
#
# set_options() {
#   # Workarounds for accessing the Mac OS X pasteboard in tmux sessions.
#   # https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
#   if command -v reattach-to-user-namespace > /dev/null 2>&1; then
#     tmux set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"
#   fi
#
#   # Enable aggressively resize.
#   case "${TERM_PROGRAM:-}" in
#     iTerm*) ;;
#     *) tmux set-window-option -g aggressive-resize on ;;
#   esac
#   case "${LC_TERMINAL:-}" in
#     iTerm*) ;;
#     *) tmux set-window-option -g aggressive-resize on ;;
#   esac
#
#   # Enable 24-bit color terminal.
#   case "${TERM:-}" in
#     screen-*|tmux-*) ;;
#     *) tmux set-option -a -s terminal-overrides ",*256col*:Tc" ;;
#   esac
# }
#
# # shellcheck disable=SC2034
# set_theme() {
#   # onedark colorscheme
#   # https://github.com/odedlaz/tmux-onedark-theme
#
#   red=#e06c75
#   green=#98c379
#   yellow=#e5c07b
#   blue=#61afef
#   purple=#c678dd
#   cyan=#56b6c2
#   white=#abb2bf
#   black=#282c34
#   comment_grey=#5c6370
#   visual_grey=#3e4452
#
#   tmux set-option -g status-style "bg=${black},fg=${white}" \;\
#        set-option -g status-left-style "bg=${green},fg=${black}" \;\
#        set-option -g status-right-style "bg=${visual_grey},fg=${white}" \;\
#        set-option -g window-style "bg=${black},fg=${white}" \;\
#        set-window-option -g window-status-style "bg=${black},fg=${white}" \;\
#        set-window-option -g window-status-activity-style "bg=${visual_grey},fg=${white}" \;\
#        set-window-option -g window-status-current-style "bg=${visual_grey},fg=${white},bold" \;\
#        set-window-option -g window-status-bell-style "bg=${red},fg=${black}" \;\
#        set-option -g pane-border-style "bg=${black},fg=${comment_grey}" \;\
#        set-option -g pane-active-border-style "bg=${black},fg=${green}" \;\
#        set-option -g message-style "bg=${black},fg=${white}" \;\
#        set-option -g message-command-style "bg=${black},fg=${white}" \;\
#        set-option -g display-panes-colour "${white}" \;\
#        set-option -g display-panes-active-colour "${yellow}" \;\
#        set-window-option -g clock-mode-colour "${blue}" \;\
#        set-option -g mode-style "bg=${yellow},fg=${black}" \;\
#
#   tmux set-option -g status-left " #{session_name} #{window_index} #{pane_index} " \;\
#        set-option -g status-right "#{?client_prefix,#[reverse] ^A #[noreverse],} %R | #{host_short} " \;\
#        set-window-option -g window-status-format " #{window_index}:#{window_name}#{window_flags} " \;\
#        set-window-option -g window-status-current-format " #{window_index}:#{window_name}#{window_flags} " \;\
#        set-window-option -g window-status-separator ""
# }
#
# set_bindings() {
#   # Copying to system clipboard.
#   # https://github.com/tmux-plugins/tmux-yank
#   #   <prefix> y        Copy buffer to OS clipboard.
#   #   <prefix> Y        Copy current working directory to OS clipboard.
#   #   <copy-mode-vi> y  Copy selection to OS clipboard.
#   #   <copy-mode-vi> Y  Copy and paste selection.
#   if command -v xsel > /dev/null 2>&1; then
#     # X11 (xsel)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - | xsel -i -b' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" | xsel -i -b' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -i -b' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   elif command -v xclip > /dev/null 2>&1; then
#     # X11 (xclip)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - | xclip -i -selection clipboard > /dev/null 2>&1' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" | xclip -i -selection clipboard > /dev/null 2>&1' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -i -selection clipboard > /dev/null 2>&1' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   fi
#   if command -v pbcopy > /dev/null 2>&1; then
#     # macOS (pbcopy)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - | pbcopy' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" | pbcopy' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   fi
#   if command -v reattach-to-user-namespace > /dev/null 2>&1; then
#     # macOS (reattach-to-user-namespace pbcopy)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - | reattach-to-user-namespace pbcopy' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" | reattach-to-user-namespace pbcopy' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   fi
#   if command -v clip.exe > /dev/null 2>&1; then
#     # WSL (clip.exe)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - | clip.exe' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" | clip.exe' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'cat | clip.exe' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   fi
#   if [ -c /dev/clipboard ]; then
#     # Cygwin (/dev/clipboard)
#     tmux bind-key -T prefix y run-shell -b 'tmux save-buffer - > /dev/clipboard' \;\
#          bind-key -T prefix Y run-shell -b 'tmux display-message -p "#{pane_current_path}" | tr -d "\n" > /dev/clipboard' \;\
#          bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'cat > /dev/clipboard' \;\
#          bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel 'tmux paste-buffer'
#   fi
#
#   # Quick opening of a highlighted file or url.
#   # https://github.com/tmux-plugins/tmux-open
#   #   <copy-mode-vi> o        Open a highlighted selection with the system default program.
#   #   <copy-mode-vi> Ctrl-o   Open a highlighted selection with the system default editor.
#   if command -v xdg-open > /dev/null 2>&1; then
#     # X11 (xdg-open)
#     tmux bind-key -T copy-mode-vi o send-keys -X copy-pipe-and-cancel 'xargs -I {} tmux run-shell -b "cd #{pane_current_path}; xdg-open \"{}\" > /dev/null"'
#     tmux bind-key -T copy-mode-vi C-o send-keys -X copy-pipe-and-cancel "xargs -I {} tmux send-keys '${EDITOR:-vim} -- \"{}\"'; tmux send-keys C-m"
#   fi
#   if command -v open > /dev/null 2>&1; then
#     # macOS (open)
#     tmux bind-key -T copy-mode-vi o send-keys -X copy-pipe-and-cancel 'xargs -I {} tmux run-shell -b "cd #{pane_current_path}; open \"{}\" > /dev/null"'
#     tmux bind-key -T copy-mode-vi C-o send-keys -X copy-pipe-and-cancel "xargs -I {} tmux send-keys '${EDITOR:-vim} -- \"{}\"'; tmux send-keys C-m"
#   fi
#   if command -v cygstart > /dev/null 2>&1; then
#     # Cygwin (cygstart)
#     tmux bind-key -T copy-mode-vi o send-keys -X copy-pipe-and-cancel 'xargs -I {} tmux run-shell -b "cd #{pane_current_path}; cygstart \"{}\" > /dev/null"'
#     tmux bind-key -T copy-mode-vi C-o send-keys -X copy-pipe-and-cancel "xargs -I {} tmux send-keys '${EDITOR:-vim} -- \"{}\"'; tmux send-keys C-m"
#   fi
#
#   # Quickly open any URL using urlview.
#   #   <prefix> u        Open a new pane with a urlview selection of the current tmux pane.
#   if command -v urlview > /dev/null 2>&1; then
#     tmux bind-key -T prefix u run-shell '
#       tmux capture-pane -J -S - -E - -b "urlview-#{pane_id}" -t "#{pane_id}"
#       tmux split-window "tmux show-buffer -b urlview-#{pane_id} | urlview || true; tmux delete-buffer -b urlview-#{pane_id}"
#     '
#   fi
#
#   # Quickly open any path using Facebook PathPicker (fpp).
#   #   <prefix> f        Open a new pane with a fpp selection of the current tmux pane.
#   if command -v fpp > /dev/null 2>&1; then
#     tmux bind-key -T prefix f run-shell '
#       tmux capture-pane -J -S - -E - -b "fpp-#{pane_id}" -t "#{pane_id}"
#       tmux split-window "tmux show-buffer -b fpp-#{pane_id} | fpp || true; tmux delete-buffer -b fpp-#{pane_id}"
#     '
#   fi
# }
#
# main() {
#   set_options &
#   set_theme &
#   set_bindings &
# }
#
# "$@"
