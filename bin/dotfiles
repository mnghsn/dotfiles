#!/bin/bash
#
# Installs or synchronizes dotfiles.

set -o errexit
set -o errtrace
set -o pipefail
set -o nounset

# N.B. If you want to fork this repository and maintain your own dotfiles, you
# must substitute the following variables for your own.
DOTFILES_GIT_URL=${DOTFILES_GIT_URL:-'https://github.com/jmlntw/dotfiles.git'}
DOTFILES_TAR_URL=${DOTFILES_TAR_URL:-'https://github.com/jmlntw/dotfiles/tarball/master'}

DOTFILES_PATH=${DOTFILES_PATH:-"${HOME}/.dotfiles"}

#######################################
# Prints help message.
#######################################
run_help() {
cat <<EOS
Usage: ${0##*/} [options]

Options:
  -h, --help        Print this help message.
      --no-sync     Suppress pulling from the remote repository.
EOS
}

#######################################
# Installs dotfiles to home directory.
#######################################
install_dotfiles() {
  e_header 'Installing...'

  # Executable files
  link_file 'bin/dotfiles' '.local/bin/dotfiles'
  link_file 'bin/$'        '.local/bin/$'
  link_file 'bin/pyserver' '.local/bin/pyserver'
  link_file 'bin/colors'   '.local/bin/colors'

  # Shell
  link_file 'shell/bashrc'         '.bashrc'
  link_file 'shell/bash_profile'   '.bash_profile'
  link_file 'shell/bash_aliases'   '.bash_aliases'
  link_file 'shell/bash_exports'   '.bash_exports'
  link_file 'shell/bash_functions' '.bash_functions'
  link_file 'shell/bash_logout'    '.bash_logout'
  link_file 'shell/bash_options'   '.bash_options'
  link_file 'shell/bash_paths'     '.bash_paths'
  link_file 'shell/bash_prompt'    '.bash_prompt'
  link_file 'shell/inputrc'        '.inputrc'
  link_file 'shell/curlrc'         '.curlrc'

  # tmux
  link_file 'tmux/tmux.conf' '.tmux.conf'

  # Git
  link_file 'git/gitconfig' '.gitconfig'
  link_file 'git/gitignore' '.gitignore'

  # Vim
  link_file 'vim/vimrc' '.vim/vimrc'

  # Mozilla Firefox
  link_file 'firefox/user.js'                '.mozilla/firefox/default/user.js'
  link_file 'firefox/chrome/userChrome.css'  '.mozilla/firefox/default/chrome/userChrome.css'
  link_file 'firefox/chrome/userContent.css' '.mozilla/firefox/default/chrome/userContent.css'

  # Visual Studio Code
  copy_file 'vscode/globalStorage/state.vscdb' '.config/Code/User/globalStorage/state.vscdb'
  link_file 'vscode/settings.json'             '.config/Code/User/settings.json'
  link_file 'vscode/extensions.json'           '.config/Code/User/extensions.json'
}

#######################################
# Downloads dotfiles from the remote
# repository.
#######################################
download_dotfiles() {
  e_header 'Downloading...'

  if command_exists git; then
    # Use Git to clone the remote repository.
    git clone --depth 1 --recursive "${DOTFILES_GIT_URL}" "${DOTFILES_PATH}"
  elif command_exists curl || command_exists wget; then
    local tarball="${HOME}/dotfiles.tar.gz"

    # Use cURL or Wget to download the tarball.
    if command_exists curl; then
      curl -L# -o "${tarball}" "${DOTFILES_TAR_URL}"
    elif command_exists wget; then
      wget -nv -O "${tarball}" "${DOTFILES_TAR_URL}"
    fi
    # Extract the tarball to dotfiles directory.
    mkdir -p "${DOTFILES_PATH}"
    tar -zxf "${tarball}" --strip-components 1 -C "${DOTFILES_PATH}"
    rm -rf "${tarball}"
  else
    die 'Either Git, cURL or Wget is required.'
  fi
}

#######################################
# Synchronizes dotfiles with the remote
# repository.
#######################################
sync_dotfiles() {
  e_header 'Synchronizing...'

  if ! command_exists git; then
    e_warning 'Git is not installed. Skipped synchronization.'
    return 0
  fi

  cd "${DOTFILES_PATH}"

  if ! is_git_repo; then
    # Initialize the Git repository.
    git init
    git remote add origin "${DOTFILES_GIT_URL}"
    git fetch origin master
    # Reset the repository.
    git reset --hard FETCH_HEAD
    git clean -fd
  fi

  # Update from the remote repository.
  git pull --rebase origin master
  git submodule update --recursive --init --quiet
}

#######################################
# Creates a symbolic link between
# dotfiles and home directory.
#######################################
link_file() {
  local source="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Exit if the source file does not exist.
  if [[ ! -f "${source}" ]]; then
    die "File not found: ${source}"
  fi

  # Create a backup if the target file exists.
  if [[ -f "${dest}" ]] && [[ ! -L "${dest}" ]]; then
    mv "${dest}" "${dest}.bak"
  fi

  mkdir -p "${dest%/*}"
  ln -fs "${source}" "${dest}"

  e_success "Linked: ${1} -> ~/${2}"
}

#######################################
# Copies a file from dotfiles to home
# directory.
#######################################
copy_file() {
  local source="${DOTFILES_PATH}/${1}"
  local dest="${HOME}/${2}"

  # Exit if the source file does not exist.
  if [[ ! -f "${source}" ]]; then
    die "File not found: ${source}"
  fi

  # Create a backup if the target file exists.
  if [[ -f "${dest}" ]]; then
    mv "${dest}" "${dest}.bak"
  fi

  mkdir -p "${dest%/*}"
  cp -f "${source}" "${dest}"

  e_success "Copied: ${1} -> ~/${2}"
}

#######################################
# Tests whether we are in a Git
# repository.
#######################################
is_git_repo() {
  git rev-parse --is-inside-work-tree &>/dev/null
}

#######################################
# Tests whether a command exists.
#######################################
command_exists() {
  command -v "$@" >/dev/null 2>&1
}

#######################################
# Terminates this script with an error
# message and returns an exit status.
#######################################
die() {
  printf ' \033[1;31m✘ Terminated: %s\033[0m\n' "${1}" 1>&2
  exit "${2:-1}"
}

#######################################
# Prints a header message.
#######################################
e_header() {
  printf '\n\033[1;37m%s\033[0m\n' "$@"
}

#######################################
# Prints a success message.
#######################################
e_success() {
  printf ' \033[1;32m✔\033[0m %s\n' "$@"
}

#######################################
# Prints an error message.
#######################################
e_error() {
  printf ' \033[1;31m✘\033[0m %s\n' "$@"
}

#######################################
# Prints a warning message.
#######################################
e_warning() {
  printf ' \033[1;33m!\033[0m %s\n' "$@"
}

#######################################
# Starts this script.
#######################################
main() {
  trap 'die "There was an error at line ${LINENO}."' ERR

  local opt_sync=true

  # Test for all known options.
  for opt in "$@"; do
    case "${opt}" in
      -h|--help) run_help; exit ;;
      --no-sync) opt_sync=false ;;
    esac
  done

  echo '      _       _    __ _ _            '
  echo '   __| | ___ | |_ / _(_) | ___  ___  '
  echo '  / _` |/ _ \| __| |_| | |/ _ \/ __| '
  echo ' | (_| | (_) | |_|  _| | |  __/\__ \ '
  echo '  \__,_|\___/ \__|_| |_|_|\___||___/ '
  echo
  echo "* DOTFILES_GIT_URL: ${DOTFILES_GIT_URL}"
  echo "* DOTFILES_TAR_URL: ${DOTFILES_TAR_URL}"
  echo "* DOTFILES_PATH: ${DOTFILES_PATH}"

  # Get dotfiles from the remote repository.
  if [[ ! -d "${DOTFILES_PATH}" ]]; then
    download_dotfiles
  elif $opt_sync; then
    sync_dotfiles
  fi

  # Install dotfiles.
  install_dotfiles

  e_header 'Completed.'
  e_warning 'Restart the shell before you continue.'
}

main "$@"
